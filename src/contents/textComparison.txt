export function violinZoomRender(zoomState,xScale, yScale, xType, yType, xField, yField, line, connectIndividual, g, xAxis, yAxis, newXScaleRef, newYScaleRef, getSubBandScale, xNum, studentsChecked, subBandCount)
{
    const {zoomXScale, zoomYScale, subBandWidth, zoomedX} = init_ZoomSetting(zoomState, xScale, yScale, xType, yType, g, xAxis, yAxis, newXScaleRef, newYScaleRef, getSubBandScale, subBandCount);
          
    g.selectAll('.violins')
    .attr("transform",  d => {
        return `translate(${zoomedX(d)+ subBandWidth/2  }, 0)`;   //
        })
    .selectAll('.area')
    .attr("d", d3.area()
        .x0(d => xNum(-d.length *singleViolinWidthRatio)*zoomState.k )  //
        .x1(d => xNum(d.length *singleViolinWidthRatio) *zoomState.k)    // 
        .y(d => yScale(d.x0))   //d.x0
        .curve(d3.curveCatmullRom)
                );  

    g.selectAll('.lastingClassLines')
    .attr("x1", function(){
        const startSeason = d3.select(this).attr('startSeason');
        const startClassID = d3.select(this).attr('startClassID');
        return zoomXScale(startSeason) + getSubBandScale(startSeason)(startClassID)* zoomState.k + subBandWidth / 2;
    })
    .attr("x2", function(){
        const endSeason = d3.select(this).attr('endSeason');
        const endClassID = d3.select(this).attr('startClassID');
        return zoomXScale(endSeason) + getSubBandScale(endSeason)(endClassID)* zoomState.k + subBandWidth / 2;
    })


    // Apply zoom transformation to lines
    var filteredSelection = g.selectAll('.line-path')
    .filter(function() {
        return d3.select(this).style('visibility') === 'visible';
    });

    if (filteredSelection.size() > 0) {
    filteredSelection.attr('d', line.x(d => zoomXScale(d[xField])).y(d => zoomYScale(d[yField])));
    }
    
    if( studentsChecked) {
        zoomIndividualJitter( g, zoomXScale, zoomState, subBandWidth, getSubBandScale, connectIndividual);
    }
    
}