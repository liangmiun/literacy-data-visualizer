export function boxZoomRender(zoomState,xScale, yScale, xType, yType, xField, yField, line, connectIndividual, g, xAxis, yAxis, newXScaleRef, newYScaleRef, getSubBandScale, studentsChecked, subBandCount)
{
    const {zoomXScale, zoomYScale, subBandWidth, zoomedX} = init_ZoomSetting(zoomState, xScale, yScale, xType, yType, g, xAxis, yAxis, newXScaleRef, newYScaleRef, getSubBandScale, subBandCount);
    // Apply zoom transformation to boxes
    g.selectAll('.boxes, .medianText')  //
    .attr("x", d => {  
        return zoomedX(d);      
    })
    .attr("width", d => {
        return subBandWidth; })

    g.selectAll('.medianLines')
    .attr("x1", d => {
        return zoomedX(d); 
    })
    .attr("x2", d => {
        return zoomedX(d) + subBandWidth;
    })


    g.selectAll('.vertLines')
    .attr("x1", d => {
        return zoomedX(d) + subBandWidth / 2;
    })
    .attr("x2", d => {
        return zoomedX(d) + subBandWidth / 2;
    })


    g.selectAll('.lastingClassLines')
    .attr("x1", function(){
        const startSeason = d3.select(this).attr('startSeason');
        const startClassID = d3.select(this).attr('startClassID');
        return zoomXScale(startSeason) + getSubBandScale(startSeason)(startClassID)* zoomState.k + subBandWidth / 2;
    })
    .attr("x2", function(){
        const endSeason = d3.select(this).attr('endSeason');
        const endClassID = d3.select(this).attr('startClassID');
        return zoomXScale(endSeason) + getSubBandScale(endSeason)(endClassID)* zoomState.k + subBandWidth / 2;
    })


    // Apply zoom transformation to lines  if (showLines)
    var filteredSelection = g.selectAll('.line-path')
                          .filter(function() {
                              return d3.select(this).style('visibility') === 'visible';
                          });

    if (filteredSelection.size() > 0) {
        filteredSelection.attr('d', line.x(d => zoomXScale(d[xField])).y(d => zoomYScale(d[yField])));
    }

    

    if( studentsChecked) {
        zoomIndividualJitter( g, zoomXScale, zoomState, subBandWidth, getSubBandScale, connectIndividual);
    }
}